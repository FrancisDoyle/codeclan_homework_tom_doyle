---
title: "R Notebook"
output: html_notebook
---
#shiny tips

1. recognising shiny is difficult
-debugging
-how to structure building an ap from start to finish(?)
2.adding more cool stuffs
-more plotting options
-output options

##The suggested workflow for shiny app development

-start outside of shiny all together, think about what visualisations you want,
what options the user should have, make some kind of wireframe



whisky distil locations

-app should take in whisky region from the user
-app should output a map of scotland with that region focusse don wiht the 
distil location pointed out

-start with the ui / app skeleton
-where your input, where are your outputs

- do we need tabs? ar ewe using grid? 

- intermediate step: build example plots

make sure things work as expected out side the ap pcontext

Can i make  amap in an r notebook for the speyside distil

-then plug working output in to the server

other bits tha thelp when writing apps:

modularization

-splitting up your app across several files
instead of
.rproj
app.r

you can have 

rproj
ui.r
sever.r
global.r
functions sep too maybe*
------------------------------------------------------------------------------

Make a spatial visualisation of the distils in speyside

```{r}
library(leaflet)
library(tidyverse)

whisky <- CodeClanData::whisky

whisky %>% 
  filter(Region== "Speyside") %>% 
  leaflet() %>% 
  addProviderTiles(provider = providers$OpenStreetMap) %>% 
  addMarkers(lng = ~Longitude, lat= ~Latitude, 
             popup = ~Distillery)

```

#debug

```{r}
library(tidyverse)
library(shiny)

students_big <- read_csv("data/students_big.csv")

ui <- fluidPage(
  sliderInput("sample_size", "Sample Size", value = 50, min = 1, max = 912),
  plotOutput("histogram")
)

server <- function(input, output) {
  
  sampled_data <- reactive({
    students_big %>%
      select(handed) %>%
      sample_n(input$sample_size) 
  )
  
  output$histogram <- renderPlot({
    
    ggplot(sampled_data) +
      aes(x = height) +
      geom_histogram()
    
  })
}

shinyApp(ui, server)
```










